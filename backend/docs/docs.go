// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Henri Vandersleyen",
            "url": "http://www.swagger.io/support",
            "email": "henri-vandersleyen@protonmail.com"
        },
        "license": {
            "name": "BSD-3-Clause license",
            "url": "https://opensource.org/license/bsd-3-clause/"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/printer": {
            "get": {
                "description": "show all printers",
                "tags": [
                    "printers"
                ],
                "summary": "Show all printers listed",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Printer"
                            }
                        }
                    },
                    "404": {
                        "description": "Printers not found",
                        "schema": {
                            "$ref": "#/definitions/response.APIError"
                        }
                    }
                }
            },
            "post": {
                "description": "create a new printer object",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "printers"
                ],
                "summary": "add a new printer to the DB",
                "parameters": [
                    {
                        "description": "Printer Data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Printer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Printer"
                        }
                    },
                    "500": {
                        "description": "Error with input",
                        "schema": {
                            "$ref": "#/definitions/response.APIError"
                        }
                    }
                }
            }
        },
        "/api/printer/{id}": {
            "get": {
                "description": "get printer data by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "printers"
                ],
                "summary": "show the data for printer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Printer Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Printer"
                        }
                    },
                    "404": {
                        "description": "Printer not found",
                        "schema": {
                            "$ref": "#/definitions/response.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a printer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "printers"
                ],
                "summary": "Delete a user's printer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Printer Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Printer deleted",
                        "schema": {
                            "$ref": "#/definitions/model.Printer"
                        }
                    },
                    "404": {
                        "description": "Printer not found",
                        "schema": {
                            "$ref": "#/definitions/response.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a printer data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "printers"
                ],
                "summary": "Updates a user's printer info",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Printer Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Printer Data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Printer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Printer updated",
                        "schema": {
                            "$ref": "#/definitions/model.Printer"
                        }
                    },
                    "404": {
                        "description": "Printer not found",
                        "schema": {
                            "$ref": "#/definitions/response.APIError"
                        }
                    },
                    "500": {
                        "description": "Error with input",
                        "schema": {
                            "$ref": "#/definitions/response.APIError"
                        }
                    }
                }
            }
        },
        "/api/user": {
            "post": {
                "description": "create a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "create a new user",
                "parameters": [
                    {
                        "description": "User Data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "500": {
                        "description": "Error with input",
                        "schema": {
                            "$ref": "#/definitions/response.APIError"
                        }
                    }
                }
            }
        },
        "/api/user/{id}": {
            "get": {
                "description": "get user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "show a user's account",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/response.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/response.APIError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a user info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Updates a user info",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User Data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/response.APIError"
                        }
                    },
                    "500": {
                        "description": "Error with input",
                        "schema": {
                            "$ref": "#/definitions/response.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "model.Printer": {
            "type": "object",
            "properties": {
                "board": {
                    "type": "string"
                },
                "brand": {
                    "type": "string"
                },
                "buildVolume": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "extruder": {
                    "type": "string"
                },
                "hotend": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mods": {
                    "description": "REVIEW: should be a k/v nested obj instead of a str",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nozzle": {
                    "type": "integer"
                },
                "powerSupply": {
                    "type": "string"
                },
                "probe": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "response.APIError": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "errorCode": {
                    "type": "integer"
                },
                "errorMessage": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Printer Exchange Api",
	Description:      "This is a sample server celler server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
